# Sites Explained

Sympal offers the ability to have multiple sites within one project. The benefit
of having multiples sites in one project is that the sites can share information 
and code. It is typical for a companies web presence to have multiple faces and 
each one has its own sitemap, content, layouts, etc. With Sympal this is insanely 
easy as all the data is organized per site in the database. This allows us to 
manage data for the current site or other sites.

For each Sympal site that exists, a matching Symfony application must exist as 
well. For example the default installation data fixtures create a site named 
"sympal", so it assumes that their is an application created with the same name.

    [php]
    // project/web/index.php
    
    require_once(dirname(__FILE__).'/../config/ProjectConfiguration.class.php');

    $configuration = ProjectConfiguration::getApplicationConfiguration('sympal', 'prod', false);
    sfContext::createInstance($configuration)->dispatch();

> **NOTE**
> Notice how the first argument given to `getApplicationConfiguration` is the same
> as our application name, sympal.

## Queries

When you are viewing the content of a "site", the query for viewing content is 
automatically altered to include the conditions to limit it to show only the data
from that site.

Of course you can construct your own queries and exclude these conditions to 
retrieve all data or to retrieve data from another site.

## Creating New Site

Creating a new site is entirely too easy. It is almost the same as generating an
application. Sympal has extended the base application generator to customize the 
files after it has been generated.

It gives you a barebones default layout and prepares your new Sympal site so that 
it is ready for you to develop in right away!

    $ php symfony sympal:create-site site_name "The description of your site"

> **NOTE**
> The `create-site` tasks accepts the same options as `generate-app` such as 
> `escaping_strategrt` and `csrf-secret`.

Now your new site is generated with some barebones default data. You can access
your new site by going to http://localhost/site_name_dev.php or http://localhost/site_name.php.

## Getting Current Site

When you are developing in Sympal you'll often want to know what the current site is.
This can be done a few different ways and we'll show you some examples below.

Since the Sympal sites are bound to Symfony applications, we can know the slug of 
the site by using the `sf_app` config value.

    [php]
    $siteSlug = sfConfig::get('app_sympal_config_site_slug', sfConfig::get('sf_app'));

We can also retrieve this same value from the Sympal context.

    [php]
    $siteSlug = sfSympalContext::getInstance()->getSite();

You may want to just go ahead and get the record for the site too.

    [php]
    $site = sfSympalContext::getInstance()->getSiteRecord();
    echo $site->name;
    print_r($site->toArray());

## Site Layout

You can change the layout that a site should use a few different ways.

First, you can set the `default_layout` setting with `sfSympalConfig`:

    [php]
    sfSympalConfig::set('default_layout', 'my_layout');

It would be ideal to just change this value in your `app.yml` for the application. 
Edit `apps/site_name/config/app.yml` and place the following YAML inside.

    [yml]
    all:
      sympal_config:
        default_layout: layout

> **NOTE**
> When we generated the new site in an earlier step, the app.yml shown above
> was generated for you so that the new site does not use the bundled Sympal layout.

You can also change the layout the site uses by editing the site record in the 
database. Their you will find a property named `layout` and the value of this property 
is used whenever you are in that site. Of course this can be overridden at
a higher level by content types and content records.