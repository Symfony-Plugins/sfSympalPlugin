# Customizing Installation

The Sympal installation process can be customized several different ways. Below 
we will discuss how you can customize the installation process for your project.

## Data Fixtures

By default Sympal comes with a set of installation data fixtures. These fixtures
are used when installing but can be overridden by your project. The default fixtures 
can be found in the `data/fixtures` directory of every Sympal plugin.

For example: `sfSympalPlugin/data/fixtures/install.yml` or the install fixtures 
for `sfSympalPagesPlugin` are located in `sfSympalPlugin/lib/plugins/sfSympalPagesPlugin/data/fixtures/install.yml`.

If you want to ignore these default fixtures simply create your own `install.yml` in 
your `project/data/fixtures` directory. You can copy and paste then modify the default
fixtures to customize your installation default data.

## Post Install SQL

You can optionally execute custom SQL files at the end of the installation process. 
This nice little feature allows you to do things at the end of the installation 
that may be DBMS specific and can't be done through the ORM. Or you could use it to 
populate your newly created database with the initial data instead of using data fixtures.

You can execute SQL for the current connect or per connection by placing the 
files in specific locations in the `project/data/sql` directory. For example 
to have some globally executed SQL for each connect you can place it in the 
`data/sql/sympal_install` directory.

    [sql]
    // data/sql/sympal_install/install.sql
    CREATE TABLE some_table (id BIGINT AUTO_INCREMENT, title VARCHAR(255) NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;

Or you can execute custom SQL statements for each individual connection by placing 
the SQL files in a directory named after the connection name.

    [sql]
    // data/sql/sympal_install/<conn_name>/install.sql
    CREATE TABLE some_table (id BIGINT AUTO_INCREMENT, title VARCHAR(255) NOT NULL, PRIMARY KEY(id)) ENGINE = INNODB;

Now when you run the installation process, at the very end the contents of these SQL
files will be executed.

## Post Install Hook

A simple post install hook is called at the end of the installation process to allow
you to execute additional code when the install is done. The function is looked 
for on your `ProjectConfiguration` class.

    [php]
    class ProjectConfiguration extends sfProjectConfiguration
    {
      public function install()
      {
        // Do some extra work
        // Create default users
        // $user = new User();
        // ...
      }
    }

## Pre & Post Install Events

When the installation process is invoked, a Symfony event is fired before and after 
to allow you to execute custom code. The event names are `sympal.pre_install` 
and `sympal.post_install`.

    [php]
    $dispatcher->connect('sympal.post_install', array('MyInstall, 'postInstall'));
    
    class MyInstall
    {
      public static function postInstall(sfEvent $event)
      {
        
      }
    }