# sfSympalPlugin

Sympal is an extension of symfony that provides a content management framework layer on top of all the greatness you get with symfony. It is a nice plug n' play architecture so other Sympal plugins can interact with the core and manipulate things with events.

> **NOTE**
> This plugin requires `sfDoctrinePlugin` so it assumes you have setup your `databases.yml` to work for Doctrine.

## Demo

[Sympal Demo](http://www.jwage.com/sympal_demo)

## Screenshots


### Editor

* [http://twitpic.com/28klz](http://twitpic.com/28klz)
* [http://twitpic.com/28kmf](http://twitpic.com/28kmf)
* [http://twitpic.com/28kmk](http://twitpic.com/28kmk)
* [http://twitpic.com/28kn3](http://twitpic.com/28kn3)
* [http://twitpic.com/28kn7](http://twitpic.com/28kn7)

### Plugin Manager

* [http://twitpic.com/2ceeq](http://twitpic.com/2ceeq)
* [http://twitpic.com/2cefa](http://twitpic.com/2cefa)
* [http://twitpic.com/2cefn](http://twitpic.com/2cefn)
* [http://twitpic.com/2cehc](http://twitpic.com/2cehc)
* [http://twitpic.com/2cehw](http://twitpic.com/2cehw)

## Installing sfSympalPlugin

First you need to install Sympal by installing the `sfSympalPlugin`.

    $ svn co http://svn.symfony-project.com/plugins/sfSympalPlugin/trunk plugins/sfSympalPlugin

### Enabling sfSympalPlugin

The `sfSympalPlugin` is the core plugin that makes up the Sympal core. It contains several other plugins inside that are a part of the core. Because of this enabling `sfSympalPlugin` requires a little extra work by you in your `ProjectConfiguration` class. Open `config/ProjectConfiguration.class.php` in your favorite editor and place the following code in the `setup()` method.

    [php]
    $sympalPluginPath = realpath(dirname(__FILE__).'/../plugins/sfSympalPlugin');
    $this->setPluginPath('sfSympalPlugin', $sympalPluginPath);

    $embeddedPluginPath = $sympalPluginPath.'/lib/plugins';
    $embeddedPlugins = sfFinder::type('dir')->relative()->maxdepth(0)->in($embeddedPluginPath);
    foreach ($embeddedPlugins as $plugin)
    {
      $this->setPluginPath($plugin, $embeddedPluginPath.'/'.$plugin);
    }

> **NOTE**
> The above code assumes you placed `sfSympalPlugin` in your plugins folder. If you placed it somewhere else then you will need to adjust the paths above.

### Finish Installation

In order for Sympal to work properly you must have at least one application created. So, if you do not already have an application then create one named `sympal`.

    $ ./symfony generate:app sympal

One small thing we need to do is edit `project/apps/sympal/lib/myUser.class.php` and change the class it extends to be `sfSympalUser`. It should like the following now:

    [php]
    class myUser extends sfSympalUser
    {
    }

After doing all of the above be sure to publish your plugin assets:

    $ ./symfony plugin:publish-assets

Now we are ready to finish up and run the install task for Sympal:

    $ ./symfony sympal:install

The above task will initialize your database for Sympal and setup a basic site. Now you should be able to pull the frontend application up in your web browser and you will see the default Sympal site.

### Sympal Tasks

Sympal comes with several tasks to help you out with developing sympal plugins. Below is a list of the available tasks:

    Available tasks for the "sympal" namespace:
      :install           Install the sympal plugin content management framework.
      :plugin-download   Download a sympal plugin to an existing sympal installation
      :plugin-generate   Generate the skeleton for a sympal plugin
      :plugin-install    Install a sympal plugin to an existing sympal installation
      :plugin-uninstall  Uninstall a sympal plugin to an existing sympal installation

I will give a more detailed explanation of each task:

**sympal:install**

Build a fresh installation of Sympal with all plugins named in the pattern sfSympal*Plugin. This allows you to package together all the plugins you want to use then initialize a new installation.

    $ php symfony sympal:install

**sympal:plugin-download**

You can list the available Sympal plugins:

    $ php symfony sympal:plugin-download --list-available
    >> sympal    Check http://svn.symfony-project.com/plugins for sympal plugins
    >> sympal    Found 1 Sympal Plugin(s)
    >> sympal    ------------------------------
    >> sympal    sfSympalBlogPlugin [php symfony sympal:plugin-install Blog]

Download a Sympal plugin from the official symfony plugin repositories. This task also has an option to install the plugin after downloading. This task allows you to download Sympal plugins and install them in to existing installations where the database already exists.

    $ php symfony sympal:plugin-download Blog

**sympal:plugin-generate**

Generate a Sympal plugin skeleton. This will generate everything you need for the base of a new Sympal plugin that implements a new entity type.

    $ php symfony sympal:plugin-generate Blog

If you want to customize the name of the entity type you can specify it as an option:

    $ php symfony sympal:plugin-generate Blog --entity-type=BlogPost

Also if you want to go ahead and install it after generating then you can specify the --install option:

    $ php symfony sympal:plugin-generate Blog --entity-type=BlogPost --install

> **TIP**
> After generating the new Sympal plugin go look in your browser and you will see a new Blog entity type that is functional and ready for you to customize.

**sympal:plugin-install**

Install a Sympal plugin. This will create everything in the database needed for the plugin to function.

    $ php symfony sympal:plugin-install Blog

**sympal:plugin-uninstall**

Uninstall a Sympal plugin from your symfony project.

> **CAUTION**
> This command will remove the plugin from the database and delete it from the plugins folder.

    $ php symfony sympal:plugin-uninstall Blog

## How does Sympal Work?

The `sfSympalPlugin` includes a module named `sympal_entity`. This module is the module that is executed when rendering all entities in Sympal. Here is what it looks like:

    [php]
    class sympal_entityActions extends sfActions
    {
      public function executeIndex(sfWebRequest $request)
      {
        $sympalContext = sfSympalContext::getInstance();
        $this->renderer = $sympalContext->getRenderer($this);

        $this->setTemplate('index');
      }
    }

We retrieve the sfSympalContext instance which is created in the sfSympalPluginConfiguration:

    [php]
    // sfSympalPlugin/config/sfSympalPluginConfiguration.class.php

    class sfSympalPluginConfiguration extends sfPluginConfiguration
    {
      // ...

      public function initialize()
      {
        // ...
        $this->dispatcher->connect('context.load_factories', array($this, 'loadContext'));
      }

      public function loadContext()
      {
        sfSympalContext::createInstance(sfConfig::get('sf_app'), sfContext::getInstance());
      }

Notice how the context of Sympal is bound to the name of the symfony application it is running in. This directly correlates to the Doctrine `Site` model `slug` property and is used to filter all queries and make sure that only that sites data is displayed. So your applications and Sympal sites must be related.


## Rendering Entities

If you have an entity outside of Sympal core in some of your custom functionality, you can easily render the entity like Sympal would normally do with the following code:

    [php]
    $sympalContext = sfSympalContext::getInstance();
    $renderer = $sympalContext->renderEntity($menuItem, $entity, $format = 'html');
    echo $renderer->render();

If you have a collection of entities you can render them easily:

    [php]
    $sympalContext = sfSympalContext::getInstance();
    $renderer = $sympalContext->renderEntities($menuItem, $entities, $format = 'html');

If you retrieved the data with a `sfDoctrinePager` then you can set the pager to the renderer so it can make user of it to generate paging:

    [php]
    $renderer->setPager($pager);

Now you can render it:

    [php]
    echo $renderer->render();

If you don't have an entity object, or a menu item object but all you have is the slug of the entity then you can use the `quickRenderEntity()` method:

    [php]
    $sympalContext = sfSympalContext::getInstance();
    $renderer = $sympalContext->quickRenderEntity('home', $format = 'html');
    echo $renderer->render();

## Entity Types

In order for a Doctrine model to have the functionality needed to be a Sympal entity type, you just need to enable to the `sfSympalEntityType` behavior:

    [yml]
    BlogPost:
      actAs: [sfSympalEntityType]
      columns:
        title: string(255)
        teaser: string(255)
        body: clob

Now the model has some new columns and relationships automatically. We have a `entity_id` column:

    [php]
    $blogPost = new BlogPost();
    echo $blogPost->entity_id;

We have a new `Entity` relationship:

    [php]
    $blogPost = new BlogPost();
    $blogPost->Entity->is_published = true;

## Entity Slot Types

You can easily add a new `EntitySlotType` by first create a new record in the database for the new type. All it requires is the `name`. This is also going to be used in the name of the php class so it must be good to be used in a PHP class. For example the core type `Markdown` is used in the class named `sfSympalEntitySlotMarkdownRenderer`.

If you create a new type named `MyNewType` then you must create a new class named `sfSympalEntitySlotMyNewTypeRenderer` somewhere that symfony autoloading can make it available.

    [php]
    class sfSympalEntitySlotMyNewTypeRenderer extends sfSympalEntitySlotRenderer
    {
      public function render()
      {
        $value = $this->getRawValue();
        // do something

        return $value;
      }
    }

You must also create a corresponding widget:

    [php]
    class sfWidgetFormSympalMyNewType extends sfWidgetFormSympalMultiLineText
    {
    }

## Helpers

Sympal has several helpers available to assist you in your templates with rendering your entities breadcrumbs, slots, and other content.

### Editable Slots

To define the editable slots in your entity templates you can use the following:

    [php]
    $slotType = 'RichText';
    echo sympal_entity_slot($entity, 'slot_name', $slotType);

### Breadcrumbs

When you want to include breadcrumbs in your entity templates you can use the following:

    [php]
    echo get_sympal_breadcrumbs($menuItem, $entity = null)

### Menus

Working with Sympal menus is incredible easy. All you need to work with is the method named `get_sympal_menu()`. You use it like the following:

    [php]
    echo get_sympal_menu('primary')

The `primary` is the `name` of the root menu item for the menu I want to display. The names of the root menu items are the key to retrieving a certain menu.

The function accepts a second argument for whether or not to display the menu hierarchy recursively(children). The default value is true. Below we change the default to false.

    [php]
    echo get_sympal_menu('primary', false)

You can also get a submenu based on another menu item. It will return a menu with the children of the menu item you passed. In the below example we get the sub menu for the current menu item.

    [php]
    $menuItem = sfSympalTools::getCurrentMenuItem();
    echo get_sympal_menu($menuItem);

#### Performance

The menus are retrieved with one query and only processed once so you can retrieve a menu multiple times without it having to query and process the data multiple times.

You can also enable symfony view caching to increase performance even more!

### Comments

You can enable comments in your entities easily with the `get_sympal_comments()` method:

    [php]
    echo get_sympal_comments($entity)

## Tests

Sympal comes with unit and functional tests. You can run the tests by navigating to `sfSympalPlugin/tests/bin` and executing `prove.php`.

    $ php prove.php

You can also execute each individual unit or functional test by navigating to the file and executing it directly.

    $ cd sfSympalPlugin/tests/functional
    $ php SanityCheckTest.php

### Test Application

The test suite that we talked about above uses a test symfony application that is included in `sfSympalPlugin/tests/fixtures/project`.

It looks for the path to the symfony libs in a variable named `$_SERVER['SYMFONY']`. For the command line you can set this with the following command.

    $ export SYMFONY=/path/to/symfony/lib

If you want to run the test project from the web browser you will need to modify `sfSympalPlugin/tests/fixtures/project/config/ProjectConfiguration.class.php` and add some code to the top like the following.

    [php]
    $_SERVER['SYMFONY'] = '/path/to/symfony/lib';

You need to set the correct path to the symfony lib folder.