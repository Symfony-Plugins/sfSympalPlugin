<?php

/**
 * BasesfSympalComment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property enum $status
 * @property integer $user_id
 * @property string $name
 * @property string $email_address
 * @property string $website
 * @property clob $body
 * @property sfGuardUser $Author
 * @property Doctrine_Collection $Content
 * @property Doctrine_Collection $ContentComments
 * 
 * @method enum                getStatus()          Returns the current record's "status" value
 * @method integer             getUserId()          Returns the current record's "user_id" value
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getEmailAddress()    Returns the current record's "email_address" value
 * @method string              getWebsite()         Returns the current record's "website" value
 * @method clob                getBody()            Returns the current record's "body" value
 * @method sfGuardUser         getAuthor()          Returns the current record's "Author" value
 * @method Doctrine_Collection getContent()         Returns the current record's "Content" collection
 * @method Doctrine_Collection getContentComments() Returns the current record's "ContentComments" collection
 * @method sfSympalComment     setStatus()          Sets the current record's "status" value
 * @method sfSympalComment     setUserId()          Sets the current record's "user_id" value
 * @method sfSympalComment     setName()            Sets the current record's "name" value
 * @method sfSympalComment     setEmailAddress()    Sets the current record's "email_address" value
 * @method sfSympalComment     setWebsite()         Sets the current record's "website" value
 * @method sfSympalComment     setBody()            Sets the current record's "body" value
 * @method sfSympalComment     setAuthor()          Sets the current record's "Author" value
 * @method sfSympalComment     setContent()         Sets the current record's "Content" collection
 * @method sfSympalComment     setContentComments() Sets the current record's "ContentComments" collection
 * 
 * @package    sympal
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7200 2010-02-21 09:37:37Z beberlei $
 */
abstract class BasesfSympalComment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_sympal_comment');
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Pending',
              1 => 'Approved',
              2 => 'Denied',
             ),
             'default' => 'Pending',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('email_address', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('website', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('body', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as Author', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('sfSympalContent as Content', array(
             'refClass' => 'sfSympalContentComment',
             'local' => 'comment_id',
             'foreign' => 'content_id'));

        $this->hasMany('sfSympalContentComment as ContentComments', array(
             'local' => 'id',
             'foreign' => 'comment_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}