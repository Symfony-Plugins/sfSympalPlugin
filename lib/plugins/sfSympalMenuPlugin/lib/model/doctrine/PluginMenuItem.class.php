<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginMenuItem extends BaseMenuItem
{
  protected
    $_breadcrumbs,
    $_allPermissions;

  public function getAllPermissions()
  {
    if (!$this->_allPermissions)
    {
      $this->_allPermissions = array();
      foreach ($this->Groups as $group)
      {
        foreach ($group->Permissions as $permission)
        {
          $this->_allPermissions[] = $permission->name;
        }
      }
      foreach ($this->Permissions as $permission)
      {
        $this->_allPermissions[] = $permission->name;
      }
    }
    return $this->_allPermissions;
  }

  public function getMainContent()
  {
    $content = $this->getMasterContent();
    if ($content && $content instanceof Doctrine_Record && $content->exists())
    {
      return $content;
    } else {
      $content = $this->getContent();
      if ($content && $content instanceof Doctrine_Record && $content->exists())
      {
        return $content;
      } else {
        return false;
      }
    }
  }

  public function getParentId()
  {
    $node = $this->getNode();

    if (!$node->isValidNode() || $node->isRoot())
    {      
      return null;
    }

    $parent = $node->getParent();

    return $parent['id'];
  }
  
  public function getIndentedName()
  {
    return str_repeat('-', $this->getLevel()) . ' ' . $this->getLabel();
  }

  public function preValidate($event)
  {
    $invoker = $event->getInvoker();
    $modified = $invoker->getModified();
    if (isset($modified['is_published']) && $modified['is_published'] && !isset($modified['date_published']))
    {
      $invoker->date_published = new Doctrine_Expression('NOW()');
    }

    if (sfContext::hasInstance())
    {
      $invoker->site_id = sfSympalContext::getInstance()->getSiteRecord()->getId();
    }
  }

  public function __toString()
  {
    return $this->getIndentedName();
  }

  public function getLabel()
  {
    if ($this->getTable()->hasRelation('Translation'))
    {
      return $this->Translation['en']['label'];
    } else {
      return $this->_get('label') ? $this->_get('label'):$this->name;
    }
  }

  public function getIndented()
  {
    return (string) $this;
  }

  public function getContent()
  {
    return $this->getRelatedContent();
  }

  public function setContent(Content $content)
  {
    $this->RelatedContent = $content;
  }

  public function getItemRoute()
  {
    if (!$route = $this->getRoute())
    {
      if ($this->getHasManyContent())
      {
        $type = $this->getContentType();
        if ($type->list_route_url)
        {
          $route = '@sympal_content_type_'.$type['slug'];
        } else {
          throw new sfException('MenuItem has invalid route.');
        }
      } else if (!$this->getContent() instanceof Doctrine_Null && $this->getContent()) {
        $route = $this->getContent()->getRoute();
      }
    }
    return $route;
  }

  public function getBreadcrumbs($content = null, $subItem = null)
  {
    if (!$this->_breadcrumbs)
    {
      $this->_breadcrumbs = new sfSympalMenuBreadcrumbs('Breadcrumbs');

      if ($this->getLevel() > 0)
      {
        $tree = $this->getTable()->getTree();

        $q = Doctrine_Query::create()
          ->addSelect('m.*, e.*')
          ->from('MenuItem m')
          ->leftJoin('m.RelatedContent e');

        $tree->setBaseQuery($q);
        $ancestors = $this->getNode()->getAncestors();
        $tree->resetBaseQuery();

        $breadcrumbs = array();
        if ($ancestors)
        {
          foreach ($ancestors as $ancestor)
          {
            $breadcrumbs[$ancestor->getLabel()] = $ancestor->getItemRoute();
          }
        }

        if ($content)
        {
          if ($this->has_many_content)
          {
            $breadcrumbs[$this->getLabel()] = $this->getItemRoute();
          }

          $breadcrumbs[$content->getHeaderTitle()] = $content->getRoute();
        } else {
          $breadcrumbs[$this->getLabel()] = $this->getItemRoute();
        }

        if ($subItem)
        {
          $breadcrumbs[$subItem] = null;
        }

        $count = 0;
        $total = count($breadcrumbs);
        foreach ($breadcrumbs as $name => $route)
        {
          $count++;
          if ($count == $total)
          {
            $this->_breadcrumbs->addChild($name);
          } else {
            $this->_breadcrumbs->addChild($name, $route);
          }
        }
      }
    }
    return $this->_breadcrumbs;
  }

  public function getLayout()
  {
    if ($layout = $this->getContentType()->getLayout())
    {
      return $layout;
    } else if ($layout = $this->getSite()->getLayout()) {
      return $layout;
    } else {
      return sfSympalConfig::get('default_layout', null, $this->getSite()->getSlug());
    }
  }
}