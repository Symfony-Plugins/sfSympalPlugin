<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginMenuItemTable extends Doctrine_Table
{
  public function getForEntityType($type)
  {
    $q = Doctrine_Query::create()
      ->from('MenuItem m')
      ->leftJoin('m.EntityType t')
      ->andWhere('t.slug = ?', $type)
      ->andWhere('m.has_many_entities = 1')
      ->limit(1);

    if (!sfSympalConfig::isEditMode())
    {
      $q->andWhere('m.is_published = 1');
    }

    return $q->fetchOne();
  }

  public function toHierarchy($collection)
  {
  	// Trees mapped
  	$trees = array();
  	$l = 0;

  	if (count($collection) > 0) {
  		// Node Stack. Used to help building the hierarchy
  		$stack = array();

  		foreach ($collection as $node) {
  			$item = $node;
  			$item['__children'] = array();

  			// Number of stack items
  			$l = count($stack);

  			// Check if we're dealing with different levels
  			while($l > 0 && $stack[$l - 1]['level'] >= $item['level']) {
  				array_pop($stack);
  				$l--;
  			}

  			// Stack is empty (we are inspecting the root)
  			if ($l == 0) {
  				// Assigning the root node
  				$i = count($trees);
  				$trees[$i] = $item;
  				$stack[] = & $trees[$i];
  			} else {
  				// Add node to parent
  				$i = count($stack[$l - 1]['__children']);
  				$stack[$l - 1]['__children'][$i] = $item;
  				$stack[] = & $stack[$l - 1]['__children'][$i];
  			}
  		}
  	}

  	return $trees;
  }
}