<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class PluginsfSympalContentSlot extends BasesfSympalContentSlot
{
  protected
    $_contentRenderedFor,
    $_rendered;

  public function setContentRenderedFor(sfSympalContent $content)
  {
    $this->_contentRenderedFor = $content;
  }

  public function getContentRenderedFor()
  {
    return $this->_contentRenderedFor;
  }

  public function resetRenderCache()
  {
    $this->_rendered = null;
  }

  public function getEditForm()
  {
    if ($this->is_column)
    {
      return $this->_getContentSlotColumnForm();
    } else {
      return new sfSympalContentSlotForm($this);
    }
  }

  protected function _getContentSlotColumnForm()
  {
    $content = $this->getContentRenderedFor();
    $contentTable = $content->getTable();

    if ($contentTable->hasField($this->name))
    {
      $form = new sfSympalInlineEditContentForm($content);
      $form->useFields(array($this->name));
    }

    if (sfSympalConfig::isI18nEnabled('sfSympalContent'))
    {
      $contentTranslationTable = Doctrine::getTable('sfSympalContentTranslation');
      if ($contentTranslationTable->hasField($this->name))
      {
        $form = new sfSympalInlineEditContentForm($content);
        $form->useFields(array(sfContext::getInstance()->getUser()->getCulture()));
      }      
    }

    $contentTypeClassName = $content->getContentTypeClassName();
    $contentTypeFormClassName = $contentTypeClassName.'Form';
    $contentTypeTable = Doctrine_Core::getTable($contentTypeClassName);
    if ($contentTypeTable->hasField($this->name))
    {
      $form = new $contentTypeFormClassName($content->getRecord());
      $form->useFields(array($this->name));
    }

    if (sfSympalConfig::isI18nEnabled($contentTypeClassName))
    {
      $contentTypeTranslationClassName = $contentTypeClassName.'Translation';
      $contentTypeTranslationFormClassName = $contentTypeTranslationClassName.'Form';
      $contentTypeTranslationTable = Doctrine_Core::getTable($contentTypeTranslationClassName);
      if ($contentTypeTranslationTable->hasField($this->name))
      {
        $form = new $contentTypeFormClassName($content->getRecord());
        $form->useFields(array(sfContext::getInstance()->getUser()->getCulture()));
      }
    }

    if (!$form)
    {
      throw new InvalidArgumentException('Invalid content slot');
    }

    sfSympalFormToolkit::embedRichDateWidget('date_published', $form);

    return $form;
  }

  public function render()
  {
    if (!$this->_rendered)
    {
      if ($this->render_function)
      {
        $renderFunction = $this->render_function;
        if (method_exists($this->_contentRenderedFor, $renderFunction))
        {
          $this->_rendered = $this->_contentRenderedFor->$renderFunction($this);
        } else {
          sfSympalToolkit::autoloadHelper($renderFunction);
          $this->_rendered = $renderFunction($this->_contentRenderedFor, $this->name);
        }
      } else {
        $className = 'sfSympalContentSlot'.$this->type.'Renderer';
        $renderer = new $className($this);
        $this->_rendered = (string) $renderer;
      }
      $this->_rendered = sfApplicationConfiguration::getActive()->getEventDispatcher()->filter(new sfEvent($this, 'sympal.content_renderer.filter_slot_content'), $this->_rendered)->getReturnValue();
    }
    return $this->_rendered;
  }

  public function setValue($value)
  {
    if ($this->is_column)
    {
      $name = $this->name;
      $this->_contentRenderedFor->$name = $value;
    }

    $this->_rendered = null;
    return $this->_set('value', $value);
  }

  public function getRawValue()
  {
    if ($this->is_column)
    {
      $value = $this->_contentRenderedFor->get($this->name);
    }
    else
    {
      $value = $this->getValue();
    }
    
    $user = sfContext::getInstance()->getUser();

    if ($user->isEditMode() && !$value)
    {
      $rawValue = '[Double click to enable inline edit mode]';
    } else {
      $rawValue = $value;
    }
    return $rawValue;
  }

  public function hasValue()
  {
    return trim(strip_tags($this->render()));
  }
}