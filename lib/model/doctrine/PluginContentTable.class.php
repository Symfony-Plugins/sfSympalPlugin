<?php
/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginContentTable extends Doctrine_Table
{
  public function getTypeQuery($params)
  {
    $request = sfContext::getInstance()->getRequest();

    if (is_string($params))
    {
      $typeSlug = $params;
    } else if (is_array($params) && isset($params['type'])) {
      $typeSlug = $params['type'];
    } else if ($request->hasParameter('type')) {
      $typeSlug = $request->getParameter('type');
    }

    // Try and get the information we need without having to query the database
    // See if we can find the type table class
    $typeClass = isset($typeSlug) ? Doctrine_Inflector::classify($typeSlug):false;
    if ($typeClass && class_exists($typeClass.'Table'))
    {
      $table = Doctrine::getTable($typeClass);
      $typeName = $typeClass;
    } else {
      if (isset($typeSlug))
      {
        $q = Doctrine::getTable('ContentType')->createQuery('t')
          ->andWhere('t.slug = ? OR t.name = ?', array($typeSlug, $typeSlug));
      } else if (isset($params['slug'])) {
        $slug = $request->getParameter('slug');
        $contentSlugQuery = true;
      } else if ($request->hasParameter('slug')) {
        $slug = $request->getParameter('slug');
        $contentSlugQuery = true;
      }

      if (isset($contentSlugQuery) && $contentSlugQuery)
      {
        $q = Doctrine_Query::create()
          ->select('t.*')
          ->from('ContentType t')
          ->leftJoin('t.Content e')
          ->where('e.slug = ?', $slug);
      }

      $type = $q->fetchOne();
      $typeName = $type['name'];

      if ($typeName)
      {
        $table = Doctrine::getTable($typeName);
      }
    }

    $defaultQuery = true;
    if ($typeName)
    {
      if (method_exists($table, 'getContentQuery'))
      {
        $defaultQuery = false;
        $q = $table->getContentQuery();
      }
    }

    if ($defaultQuery)
    {
      $q = $this->getBaseQuery('e');
      if ($typeName)
      {
        $q->innerJoin('e.'.$typeName);
      } else {
        $q = $this->getBaseQuery();
      }

      if (sfConfig::get('sf_logging_enabled'))
      {
        sfContext::getInstance()->getLogger()->notice('To improve performance you should have a callable method named "getContentQuery()" on your table class that efficiently selects all the required data for your content type with joins and specific selects.');
      }
    }

    if (sfSympalConfig::get('Comments', 'enabled') && sfSympalConfig::get($typeName, 'enable_comments'))
    {
      $q->leftJoin('e.Comments c WITH c.status = ?', 'Approved')
        ->addOrderBy('c.created_at ASC');
    }

    return $q;
  }

  public function getContent($params)
  {
    $request = sfContext::getInstance()->getRequest();
    $slug = $request->getParameter('slug');

    $q = $this->getTypeQuery(array('slug' => $slug))
      ->andWhere('e.slug = ?', $slug);

    return $this->fetchContent($q);
  }

  public function getContentObjectForSite($params)
  {
    return $this->getContentForSite($params, 'object');
  }

  public function getContentListForSite($params)
  {
    return $this->getContentForSite($params, 'list');
  }

  public function getContentForSite($params, $type)
  {
    if ($type == 'object')
    {
      $q = $this->getTypeQuery($params)
        ->andWhere('e.slug = ?', $params['slug']);

      return $this->fetchContent($q);
    } else {
      $q = $this->getTypeQuery($params);
      $q->addOrderBy('e.date_published DESC');

      $pager = new sfDoctrinePager('Content', sfSympalConfig::get('rows_per_page'));
      $pager->setQuery($q);

      return $pager;
    }
  }

  public function fetchContent($q)
  {
    $content = $q->fetchOne();

    return $content;
  }

  public function getBaseQuery()
  {
    $sympalContext = sfSympalContext::getInstance();
    $q = Doctrine_Query::create()
      ->from('Content e')
      ->leftJoin('e.Slots sl')
      ->leftJoin('sl.Type sty')
      ->leftJoin('e.Type ty')
      ->leftJoin('ty.Templates t')
      ->leftJoin('e.MasterMenuItem m')
      ->leftJoin('e.MenuItem mm')
      ->innerJoin('e.Site esi WITH esi.slug = ?', $sympalContext->getSite());

    if (!sfSympalTools::isEditMode())
    {
      $q->andWhere('e.is_published = 1');
    }

    return $q;
  }
}