<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
abstract class BaseContent extends sfSympalDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('content');
        $this->hasColumn('id', 'integer', 4, array('type' => 'integer', 'primary' => true, 'autoincrement' => true, 'length' => '4'));
        $this->hasColumn('site_id', 'integer', 4, array('type' => 'integer', 'notnull' => true, 'length' => '4'));
        $this->hasColumn('content_type_id', 'integer', 4, array('type' => 'integer', 'notnull' => true, 'length' => '4'));
        $this->hasColumn('content_template_id', 'integer', 4, array('type' => 'integer', 'length' => '4'));
        $this->hasColumn('master_menu_item_id', 'integer', 4, array('type' => 'integer', 'length' => '4'));
        $this->hasColumn('last_updated_by', 'integer', 4, array('type' => 'integer', 'length' => '4'));
        $this->hasColumn('created_by', 'integer', 4, array('type' => 'integer', 'length' => '4'));
        $this->hasColumn('locked_by', 'integer', 4, array('type' => 'integer', 'length' => '4'));
        $this->hasColumn('is_published', 'boolean', null, array('type' => 'boolean'));
        $this->hasColumn('date_published', 'timestamp', null, array('type' => 'timestamp'));
        $this->hasColumn('custom_path', 'string', 255, array('type' => 'string', 'length' => '255'));
        $this->hasColumn('layout', 'string', 255, array('type' => 'string', 'length' => '255'));
    }

    public function setUp()
    {
        $this->hasOne('MenuItem as MasterMenuItem', array('local' => 'master_menu_item_id',
                                                          'foreign' => 'id',
                                                          'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as LastUpdatedBy', array('local' => 'last_updated_by',
                                                            'foreign' => 'id',
                                                            'onDelete' => 'SET NULL'));

        $this->hasOne('sfGuardUser as CreatedBy', array('local' => 'created_by',
                                                        'foreign' => 'id',
                                                        'onDelete' => 'SET NULL'));

        $this->hasOne('sfGuardUser as LockedBy', array('local' => 'locked_by',
                                                       'foreign' => 'id',
                                                       'onDelete' => 'SET NULL'));

        $this->hasOne('Site', array('local' => 'site_id',
                                    'foreign' => 'id',
                                    'onDelete' => 'CASCADE'));

        $this->hasOne('ContentType as Type', array('local' => 'content_type_id',
                                                   'foreign' => 'id',
                                                   'onDelete' => 'CASCADE'));

        $this->hasOne('ContentTemplate as Template', array('local' => 'content_template_id',
                                                           'foreign' => 'id',
                                                           'onDelete' => 'SET NULL'));

        $this->hasMany('sfGuardGroup as Groups', array('refClass' => 'ContentGroup',
                                                       'local' => 'content_id',
                                                       'foreign' => 'group_id'));

        $this->hasMany('sfGuardPermission as Permissions', array('refClass' => 'ContentPermission',
                                                                 'local' => 'content_id',
                                                                 'foreign' => 'permission_id'));

        $this->hasMany('Comment as Comments', array('refClass' => 'ContentComment',
                                                    'local' => 'content_id',
                                                    'foreign' => 'comment_id'));

        $this->hasOne('MenuItem', array('local' => 'id',
                                        'foreign' => 'content_id'));

        $this->hasMany('ContentComment as ContentComments', array('local' => 'id',
                                                                  'foreign' => 'content_id'));

        $this->hasMany('ContentSlot as Slots', array('local' => 'id',
                                                     'foreign' => 'content_id'));

        $this->hasMany('ContentGroup as ContentGroups', array('local' => 'id',
                                                              'foreign' => 'content_id'));

        $sluggable0 = new Doctrine_Template_Sluggable();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($sluggable0);
        $this->actAs($timestampable0);
    }
}