<?php

/**
 * BasesfGuardUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $username
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property boolean $is_active
 * @property boolean $is_super_admin
 * @property timestamp $last_login
 * @property Doctrine_Collection $groups
 * @property Doctrine_Collection $permissions
 * @property Doctrine_Collection $sfGuardUserPermission
 * @property Doctrine_Collection $sfGuardUserGroup
 * @property sfGuardRememberKey $RememberKeys
 * @property Doctrine_Collection $Comments
 * @property ForgotPassword $ForgotPassword
 * @property Doctrine_Collection $LastUpdatedContent
 * @property Doctrine_Collection $CreatedContent
 * @property Doctrine_Collection $LockedContent
 * @property UserProfile $Profile
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5441 2009-01-30 22:58:43Z jwage $
 */
abstract class BasesfGuardUser extends sfSympalDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sf_guard_user');
        $this->hasColumn('id', 'integer', 4, array('type' => 'integer', 'primary' => true, 'autoincrement' => true, 'length' => '4'));
        $this->hasColumn('username', 'string', 128, array('type' => 'string', 'notnull' => true, 'unique' => true, 'length' => '128'));
        $this->hasColumn('algorithm', 'string', 128, array('type' => 'string', 'default' => 'sha1', 'notnull' => true, 'length' => '128'));
        $this->hasColumn('salt', 'string', 128, array('type' => 'string', 'length' => '128'));
        $this->hasColumn('password', 'string', 128, array('type' => 'string', 'length' => '128'));
        $this->hasColumn('is_active', 'boolean', null, array('type' => 'boolean', 'default' => '1'));
        $this->hasColumn('is_super_admin', 'boolean', null, array('type' => 'boolean', 'default' => 0));
        $this->hasColumn('last_login', 'timestamp', null, array('type' => 'timestamp'));


        $this->index('is_active_idx', array('fields' => array(0 => 'is_active')));
    }

    public function setUp()
    {
        $this->hasMany('sfGuardGroup as groups', array('refClass' => 'sfGuardUserGroup',
                                                       'local' => 'user_id',
                                                       'foreign' => 'group_id'));

        $this->hasMany('sfGuardPermission as permissions', array('refClass' => 'sfGuardUserPermission',
                                                                 'local' => 'user_id',
                                                                 'foreign' => 'permission_id'));

        $this->hasMany('sfGuardUserPermission', array('local' => 'id',
                                                      'foreign' => 'user_id'));

        $this->hasMany('sfGuardUserGroup', array('local' => 'id',
                                                 'foreign' => 'user_id'));

        $this->hasOne('sfGuardRememberKey as RememberKeys', array('local' => 'id',
                                                                  'foreign' => 'user_id'));

        $this->hasMany('Comment as Comments', array('local' => 'id',
                                                    'foreign' => 'user_id'));

        $this->hasOne('ForgotPassword', array('local' => 'id',
                                              'foreign' => 'user_id'));

        $this->hasMany('Content as LastUpdatedContent', array('local' => 'id',
                                                              'foreign' => 'last_updated_by'));

        $this->hasMany('Content as CreatedContent', array('local' => 'id',
                                                          'foreign' => 'created_by'));

        $this->hasMany('Content as LockedContent', array('local' => 'id',
                                                         'foreign' => 'locked_by'));

        $this->hasOne('UserProfile as Profile', array('local' => 'id',
                                                      'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}